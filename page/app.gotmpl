{{ define "header" }}
  <header
    class="sticky top-0 flex h-screen w-64 flex-none flex-col gap-4 border-r border-slate-200 py-3"
  >
    <div class="ml-4 mr-2 flex items-baseline">
      <a class="text-xl font-bold" href="/"> Gritrack </a>
      <a
        href="/create-tracker/"
        class="ml-auto flex-none rounded px-2 py-1 text-center hover:bg-slate-100"
        >➕</a
      >
      <a
        href="/settings/"
        class="flex-none rounded px-2 py-1 text-center hover:bg-slate-100"
        >⚙️</a
      >
    </div>
    <ul class="px-2">
      <span class="mb-4 rounded px-2 text-sm font-semibold text-indigo-500">
        Your Trackers
      </span>
      {{ range .SessionUser.Trackers }}
        <li>
          <a
            class="{{ if eq .TrackerName $.Tracker.TrackerName }}
              bg-slate-100
            {{ else }}
              text-slate-400
            {{ end }} block truncate rounded px-2 py-1 hover:bg-slate-100"
            href="/{{ $.SessionUser.Username }}/{{ .TrackerName }}/"
          >
            {{ .TrackerName }}
          </a>
        </li>
      {{ end }}
    </ul>
  </header>
{{ end }}

{{ define "main" }}
  <main class="flex grow">
    <header
      class="sticky top-0 flex h-screen w-64 flex-none flex-col gap-2 border-r border-slate-200 p-3"
    >
      <h1 class="truncate text-xl font-semibold">{{ .Tracker.TrackerName }}</h1>
      {{ if .Tracker.Description }}
        <p>{{ .Tracker.Description }}</p>
      {{ end }}
    </header>

    <div class="flex grow flex-col items-center gap-8 py-8">
      <section
        class="grid grid-cols-[auto_auto_auto_auto_auto_auto_auto] content-start justify-center gap-y-12"
      >
        {{ template "months" dict "tracker" .Tracker }}
      </section>
      <button
        class="w-fit rounded-full border border-slate-200 bg-white px-6 py-1 text-slate-400 hover:bg-slate-100 hover:text-slate-600"
      >
        Load More
      </button>
    </div>
  </main>

  <dialog id="day-detail" class="w-full max-w-md rounded px-8 py-6">
    <div class="flex flex-col gap-6">
      <div class="flex flex-col">
        <div class="flex justify-between gap-2 text-slate-800">
          <h1 class="text-xl font-semibold">
            {{ .Tracker.TrackerName }}
          </h1>
          <button
            class="cursor-pointer"
            hx-on:click="document.getElementById('day-detail').close();document.getElementById('ep').classList.add('hidden')"
          >
            ✕
          </button>
        </div>
        <time id="day-detail-time" class="font-semibold text-slate-400"> </time>
      </div>

      <div class="flex flex-col gap-4">
        <div class="flex items-baseline justify-center gap-4">
          <input
            readonly
            id="emoji"
            name="emoji"
            type="text"
            value=""
            class="w-10 cursor-pointer rounded border-slate-200 bg-slate-100 p-2 text-center"
            hx-on:click="ep.classList.remove('hidden');addEmoji.classList.add('hidden');clearEmoji.classList.remove('hidden');cancelEp.classList.remove('hidden');"
          />
          <button
            id="add-emoji"
            class="font-semibold text-indigo-600 underline"
            hx-on:click="ep.classList.remove('hidden');addEmoji.classList.add('hidden');clearEmoji.classList.remove('hidden');cancelEp.classList.remove('hidden');"
          >
            Add an emoji
          </button>
          <button
            id="clear-emoji"
            class="hidden font-semibold text-rose-600 underline"
            hx-on:click="emoji.value = '';ep.classList.add('hidden');addEmoji.classList.remove('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');"
          >
            Clear
          </button>
          <button
            id="cancel-ep"
            class="hidden font-semibold text-slate-600 underline"
            hx-on:click="ep.classList.add('hidden');addEmoji.classList.remove('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');"
          >
            Cancel
          </button>
        </div>
        <emoji-picker
          hx-on:emoji-click="emoji.value = event.detail.unicode;ep.classList.add('hidden');addEmoji.classList.remove('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');"
          id="ep"
          class="hidden w-full"
        ></emoji-picker>
      </div>
      <input
        autofocus
        id="content"
        type="text"
        name="content"
        value=""
        placeholder="Notes about today's activities..."
        class="flex-grow rounded border-slate-200 bg-slate-100 p-2 placeholder-slate-300 focus:bg-white"
      />
      <button
        hx-on:click="updateDayDetail()"
        class="cursor-pointer rounded bg-indigo-600 p-2 font-semibold text-white"
      >
        Save
      </button>
    </div>
  </dialog>
  <div
    class="hidden"
    id="tracker"
    data-tracker="{{ .Tracker.TrackerName }}"
  ></div>
  <div
    class="hidden"
    id="username"
    data-username="{{ .SessionUser.Username }}"
  ></div>
  <script>
    const ep = document.getElementById("ep");
    const cancelEp = document.getElementById("cancel-ep");
    const clearEmoji = document.getElementById("clear-emoji");
    const addEmoji = document.getElementById("add-emoji");
    const tracker = document.getElementById("tracker").dataset.tracker;
    const username = document.getElementById("username").dataset.username;
    const dayDetail = document.getElementById("day-detail");
    const dayDetailTime = document.getElementById("day-detail-time");
    const inputEmoji = document.getElementById("emoji");
    const inputContent = document.getElementById("content");
    let currentDate = "";

    async function getDayDetail(tracker, date) {
      try {
        const res = await fetch(
          "/day-detail/?" +
            new URLSearchParams({ tracker: tracker, date: date }),
        );
        const { emoji, content } = await res.json();
        inputEmoji.value = emoji;
        inputContent.value = content;
        currentDate = date;
        dayDetailTime.replaceChildren(date);
        dayDetail.showModal();
      } catch (err) {
        alert("Something went wrong.");
        console.error(err);
      }
    }

    async function updateDayDetail() {
      const formData = new FormData();
      formData.set("tracker", tracker);
      formData.set("date", currentDate);
      formData.set("emoji", inputEmoji.value);
      formData.set("content", inputContent.value);

      const res = await fetch("/day-detail/", {
        method: "PUT",
        body: formData,
      });
      htmx.trigger(`#day-${currentDate}`, `update-day-${currentDate}`);
      dayDetail.close();
    }
  </script>
{{ end }}
