{{ define "body" }}
  <header class="sticky top-0 z-30 flex items-center bg-white p-4">
    <a href="/">
      {{ template "logo" dict "class" "size-7 text-eigengrau-900" }}
    </a>
    <a href="/examples/" class="ml-4 hover:underline">Examples</a>
    <a
      href="/settings/"
      class="ml-auto flex items-center justify-center rounded-xl p-2 text-eigengrau-500 hover:bg-eigengrau-50"
    >
      {{ template "icon-user" dict "class" "size-5 text-eigengrau-500" }}
    </a>
  </header>
  <main class="flex justify-center py-4">
    <nav class="flex w-full max-w-md flex-col gap-2">
      <h1 class="ml-11 flex items-baseline gap-2 text-sm text-eigengrau-700">
        Your Trackers
        <a
          href="/create-tracker/"
          class="ml-auto flex items-center rounded-xl bg-eigengrau-700 px-3 py-1 text-sm text-white hover:bg-eigengrau-900"
        >
          {{ template "icon-plus" dict "class" "size-4" }}
          New
        </a>
      </h1>
      <ul class="flex flex-col gap-4">
        {{ range $ti, $t := .sessionUser.Trackers }}
          <li class="group flex gap-2">
            <div
              class="invisible flex h-full w-5 items-center text-eigengrau-700 group-hover:visible"
            >
              {{ template "icon-bars-3" dict "class" "size-5 text-eigengrau-500" }}
            </div>
            <div
              class="relative flex flex-1 flex-col gap-2 rounded-xl border border-eigengrau-100 p-4 group-hover:border-eigengrau-300"
            >
              <h2 class="font-semibold">
                {{ .DisplayName }}
              </h2>
              <a
                href="/settings/{{ .Slug }}/"
                class="absolute right-3 top-3 hidden group-hover:block"
              >
                {{ template "icon-cog-6-tooth" dict "class" "size-5 text-eigengrau-500" }}
              </a>
              <div class="grid grid-cols-[auto_auto] justify-items-start gap-2">
                <h3 class="flex items-center gap-1 text-sm text-slate-500">
                  {{ template "icon-sun" dict "class" "size-5 text-eigengrau-300" }}
                  Today
                </h3>
                <div class="flex items-center justify-center gap-2">
                  {{ $today := index (index $.daysArr $t.Slug) 7 }}
                  {{ template "day" dict "tracker" $t "day" $today }}
                  {{ template "today-preview" dict "tracker" $t "day" $today }}
                </div>
                <h3 class="flex items-center gap-1 text-sm text-slate-500">
                  {{ template "icon-clock" dict "class" "size-5 text-eigengrau-300" }}
                  Past 7 Days
                </h3>
                <div class="flex gap-1">
                  {{ range $i, $d := slice (index $.daysArr $t.Slug) 0 7 }}
                    {{ template "day" dict "tracker" $t "day" $d }}
                  {{ end }}
                </div>
              </div>
            </div>
          </li>
        {{ end }}
      </ul>
    </nav>
  </main>
  <dialog
    x-data
    id="day-detail"
    class="fixed w-full max-w-md rounded-xl p-4 text-eigengrau-900 shadow"
  >
    <button
      type="button"
      class="absolute right-4 top-4"
      @click="dayDetail.close();$store.dayDetail.emojiPickerOpen = false"
    >
      {{ template "icon-x-mark" dict "class" "size-5" }}
    </button>
    <h1 id="day-detail-title" class="font-semibold"></h1>
    <time id="day-detail-date" class="text-sm text-eigengrau-700"></time>
    <form class="mt-4 flex flex-col gap-4">
      <input id="day-detail-slug" type="text" class="hidden" name="slug" />
      <input
        id="day-detail-input-date"
        type="text"
        class="hidden"
        name="date"
      />
      <div class="flex gap-2">
        <div class="relative">
          <input
            class="size-10 cursor-pointer rounded-xl border-eigengrau-300 p-0 text-center"
            readonly
            id="day-detail-emoji"
            name="emoji"
            type="text"
            @click="$store.dayDetail.emojiPickerOpen = true"
          />
          <div
            class="pointer-events-none absolute left-0 top-0 flex size-full items-center justify-center"
            x-show="!$store.dayDetail.emojiSelected"
          >
            {{ template "icon-face-smile" dict "class" "size-5 text-eigengrau-300" }}
          </div>
        </div>
        <input
          placeholder="Update notes for this day."
          autofocus
          class="h-10 flex-1 rounded-xl border-eigengrau-300 placeholder:text-eigengrau-300"
          id="day-detail-content"
          type="text"
          name="content"
        />
        <button
          type="button"
          @click="$store.dayDetail.emojiSelected = false;dayDetailEmoji.value='';dayDetailContent.value = ''"
        >
          {{ template "icon-trash" dict "class" "size-5" }}
        </button>
      </div>
      <emoji-picker
        class="w-full"
        x-show="$store.dayDetail.emojiPickerOpen"
        @emoji-click="$store.dayDetail.emojiSelected = true;dayDetailEmoji.value = $event.detail.unicode"
      >
      </emoji-picker>
      <button
        hx-put="/day-detail/"
        hx-swap="none"
        hx-on::after-request="dayDetail.close()"
        class="w-full rounded-xl bg-eigengrau-700 px-6 py-2 text-white"
      >
        Submit
      </button>
    </form>
  </dialog>
  <script>
    document.addEventListener("alpine:init", () => {
      Alpine.store("dayDetail", {
        emojiPickerOpen: false,
        emojiSelected: false,
      });
    });

    const dayDetail = document.getElementById("day-detail");
    const dayDetailTitle = document.getElementById("day-detail-title");
    const dayDetailDate = document.getElementById("day-detail-date");
    const dayDetailInputDate = document.getElementById("day-detail-input-date");
    const dayDetailEmoji = document.getElementById("day-detail-emoji");
    const dayDetailContent = document.getElementById("day-detail-content");
    const dayDetailSlug = document.getElementById("day-detail-slug");

    async function getDayDetail(displayName, slug, date) {
      try {
        const res = await fetch(
          "/day-detail/?" + new URLSearchParams({ slug: slug, date: date }),
        );
        const { emoji, content } = await res.json();
        dayDetailTitle.textContent = displayName;
        dayDetailDate.textContent = date;
        dayDetailInputDate.value = date;
        dayDetailEmoji.value = emoji;
        dayDetailContent.value = content;
        dayDetailSlug.value = slug;

        if (emoji !== "") {
          Alpine.store("dayDetail").emojiSelected = true;
        } else {
          Alpine.store("dayDetail").emojiSelected = false;
        }

        dayDetail.showModal();
      } catch (err) {
        alert("Something went wrong.");
        console.error(err);
      }
    }
  </script>
{{ end }}
