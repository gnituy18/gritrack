{{ define "body" }}
  <header class="sticky top-0 z-30 flex items-center bg-slate-50 p-4">
    <a href="/">
      <svg
        class="h-8 w-8"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="9 9 62 62"
        width="62"
        height="62"
      >
        <rect x="0" y="0" width="24" height="24" rx="4" ry="4" />
        <rect x="28" y="0" width="24" height="24" rx="4" ry="4" />
        <rect x="56" y="0" width="24" height="24" rx="4" ry="4" />
        <rect x="0" y="28" width="24" height="24" rx="4" ry="4" />
        <rect x="28" y="28" width="24" height="24" rx="4" ry="4" />
        <rect x="56" y="28" width="24" height="24" rx="4" ry="4" />
        <rect x="0" y="56" width="24" height="24" rx="4" ry="4" />
        <rect x="28" y="56" width="24" height="24" rx="4" ry="4" />
        <rect x="56" y="56" width="24" height="24" rx="4" ry="4" />
      </svg>
    </a>
    <a
      href="/settings/"
      class="block flex items-center justify-center gap-2 rounded-xl p-1 font-semibold hover:bg-slate-100"
      ><i class="block h-5 w-5" data-feather="user"></i
    ></a>
  </header>
  <main class="flex justify-center gap-12 pt-8">
    <nav class="flex w-96 flex-col">
      <div class="mx-4 flex items-center">
        <h1 class="text-lg font-bold text-slate-500">Your Trackers</h1>
        <a
          href="/create-tracker/"
          class="ml-auto block flex items-center justify-center rounded-xl p-2 font-semibold text-slate-500 hover:bg-slate-100"
          ><i class="block h-5 w-5" data-feather="plus"></i>
        </a>
      </div>
      <ul class="flex flex-col">
        {{ range .SessionUser.Trackers }}
          <li
            class="group flex gap-4 rounded-xl px-4 py-2 text-lg font-semibold hover:bg-slate-100"
            {{ if and $.Tracker (eq $.Tracker.Slug .Slug) }}
              href="/{{ $.SessionUser.Username }}/"
            {{ else }}
              href="/{{ $.SessionUser.Username }}/{{ .Slug }}/"
            {{ end }}
          >
            <div
              class="invisible flex h-full w-5 items-center group-hover:visible"
            >
              <i class="block h-5 w-5" data-feather="menu"></i>
            </div>
            <div class="relative flex-1">
              <h2 class="flex h-9">
                {{ .DisplayName }}
              </h2>
              <a
                href="/"
                class="absolute right-0 top-0 ml-auto hidden rounded-xl p-2 group-hover:block"
              >
                <i class="h-5 w-5 rounded-xl" data-feather="settings"></i>
              </a>
              <div>1 2 3 4 5</div>
            </div>
          </li>
        {{ end }}
      </ul>
    </nav>
    {{ if .Tracker }}
      <div>
        <div
          id="months"
          class="grid grid-cols-[auto_auto_auto_auto_auto_auto_auto] place-content-center gap-y-8"
        >
          {{ template "months" dict "tracker" .Tracker }}
        </div>
        <button
          hx-target="#months"
          hx-swap="beforeend"
          hx-get="/template/app/months/"
          hx-vals="js:{...getNextMonths()}"
          hx-on::after-request="updateFromTo(getNextFromTo().from, to.dataset.to)"
          class="rounded-full border border-slate-200 bg-white px-6 py-1 text-slate-400 hover:bg-slate-100 hover:text-slate-600"
        >
          Load More
        </button>
      </div>
    {{ end }}
  </main>

  {{ if .Tracker }}
    <dialog id="day-detail" class="w-full max-w-md rounded-xl px-8 py-6">
      <div class="flex flex-col gap-6">
        <div class="flex flex-col">
          <div class="flex justify-between gap-2 text-slate-800">
            <h1 class="text-xl font-semibold">
              {{ .Tracker.DisplayName }}
            </h1>
            <button
              class="cursor-pointer"
              hx-on:click="document.getElementById('day-detail').close();document.getElementById('ep').classList.add('hidden')"
            >
              âœ•
            </button>
          </div>
          <time id="day-detail-time" class="font-semibold text-slate-400">
          </time>
        </div>

        <div class="flex flex-col gap-4">
          <div class="flex items-center justify-center gap-4">
            <div class="relative grid h-10 w-10 place-items-center">
              <input
                readonly
                id="emoji"
                name="emoji"
                type="text"
                value=""
                class="absolute h-10 w-10 cursor-pointer rounded border-slate-200 bg-slate-100 p-0 text-center"
                hx-on:click="ep.classList.remove('hidden');clearEmoji.classList.remove('hidden');cancelEp.classList.remove('hidden');"
              />

              <i
                x-data
                x-show="!$store.emojiPicker.selected"
                class="pointer-events-none absolute text-slate-400"
                data-feather="smile"
              ></i>
            </div>
            <button
              id="clear-emoji"
              class="hidden font-semibold text-rose-600 underline"
              hx-on:click="emoji.value = '';ep.classList.add('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');Alpine.store('emojiPicker').selected = false;"
            >
              Clear
            </button>
            <button
              id="cancel-ep"
              class="hidden font-semibold text-slate-600 underline"
              hx-on:click="ep.classList.add('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');"
            >
              Cancel
            </button>
          </div>
          <emoji-picker
            hx-on:emoji-click="emoji.value = event.detail.unicode;ep.classList.add('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');Alpine.store('emojiPicker').selected = true;"
            id="ep"
            class="hidden w-full"
          ></emoji-picker>
        </div>
        <input
          autofocus
          id="content"
          type="text"
          name="content"
          value=""
          placeholder="Notes about today's activities..."
          class="flex-1 rounded border-slate-200 bg-slate-100 p-2 placeholder-slate-300 focus:bg-white"
        />
        <button
          hx-on:click="updateDayDetail()"
          class="cursor-pointer rounded bg-indigo-600 p-2 font-semibold text-white"
        >
          Save
        </button>
      </div>
    </dialog>
    <div
      class="hidden"
      id="to"
      data-to="{{ (mustFirst .Tracker.Entries.Months).FormatYYYYMM }}"
    ></div>
    <div
      class="hidden"
      id="from"
      data-from="{{ (mustLast .Tracker.Entries.Months).FormatYYYYMM }}"
    ></div>
    <div class="hidden" id="slug" data-slug="{{ .Tracker.Slug }}"></div>
  {{ end }}
  <div
    class="hidden"
    id="username"
    data-username="{{ .SessionUser.Username }}"
  ></div>
  <script>
    const ep = document.getElementById("ep");
    const cancelEp = document.getElementById("cancel-ep");
    const clearEmoji = document.getElementById("clear-emoji");
    const addEmoji = document.getElementById("add-emoji");
    const slug = document.getElementById("slug").dataset.slug;
    const from = document.getElementById("from");
    const to = document.getElementById("to");
    const username = document.getElementById("username").dataset.username;
    const dayDetail = document.getElementById("day-detail");
    const dayDetailTime = document.getElementById("day-detail-time");
    const inputEmoji = document.getElementById("emoji");
    const inputContent = document.getElementById("content");
    const months = 3;
    let currentDate = "";

    const params = new URLSearchParams(window.location.search);
    params.set("from", from.dataset.from);
    params.set("to", to.dataset.to);
    history.replaceState(
      null,
      "",
      `${window.location.pathname}?${params.toString()}`,
    );

    function getNextFromTo() {
      const [toYStr, toMStr] = from.dataset.from.split("-");
      const toY = parseInt(toYStr, 10);
      const toM = parseInt(toMStr, 10) - 1;
      let toDate = new Date(toY, toM, 1);
      toDate.setMonth(toDate.getMonth() - 1);

      let fromDate = new Date(toY, toM, 1);
      fromDate.setMonth(fromDate.getMonth() - months);

      return {
        to: `${toDate.getFullYear()}-${(toDate.getMonth() + 1).toString().padStart(2, "0")}`,
        from: `${fromDate.getFullYear()}-${(fromDate.getMonth() + 1).toString().padStart(2, "0")}`,
      };
    }

    function updateFromTo(fromStr, toStr) {
      from.dataset.from = fromStr;
      to.dataset.to = toStr;
      params.set("from", from.dataset.from);
      params.set("to", to.dataset.to);
      history.replaceState(
        null,
        "",
        `${window.location.pathname}?${params.toString()}`,
      );
    }

    function getNextMonths() {
      return {
        ...getNextFromTo(),
        slug,
        username,
      };
    }

    async function getDayDetail(slug, date) {
      try {
        const res = await fetch(
          "/day-detail/?" + new URLSearchParams({ slug: slug, date: date }),
        );
        const { emoji, content } = await res.json();
        inputEmoji.value = emoji;
        if (emoji !== "") {
          Alpine.store("emojiPicker").selected = true;
        } else {
          Alpine.store("emojiPicker").selected = false;
        }

        inputContent.value = content;
        currentDate = date;
        dayDetailTime.replaceChildren(date);
        dayDetail.showModal();
      } catch (err) {
        alert("Something went wrong.");
        console.error(err);
      }
    }

    document.addEventListener("alpine:init", () => {
      Alpine.store("emojiPicker", {
        selected: false,
      });
    });

    async function updateDayDetail() {
      const formData = new FormData();
      formData.set("slug", slug);
      formData.set("date", currentDate);
      formData.set("emoji", inputEmoji.value);
      formData.set("content", inputContent.value);

      if (emoji !== "") {
        Alpine.store("emojiPicker").selected = true;
      } else {
        Alpine.store("emojiPicker").selected = false;
      }

      const res = await fetch("/day-detail/", {
        method: "PUT",
        body: formData,
      });
      htmx.trigger(`#day-${currentDate}`, `update-day-${currentDate}`);
      dayDetail.close();
    }

    feather.replace();
  </script>

  <script type="module">
    import { computePosition } from "https://cdn.jsdelivr.net/npm/@floating-ui/dom@1.6.12/+esm";
  </script>

  <style>
    .sidebar-hidden {
      display: none;
    }
  </style>
{{ end }}
