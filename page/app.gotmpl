{{ define "header" }}
  <header
    class="sticky top-0 flex h-screen w-64 flex-none flex-col gap-4 border-r border-slate-200 py-3"
  >
    <div class="ml-4 mr-2 flex items-center">
      <p class="rounded font-semibold text-indigo-500">Trackers</p>
      <a
        href="/create-tracker/"
        class="ml-auto flex-none rounded p-1 text-center hover:bg-slate-100"
        ><i class="block h-5 w-5" data-feather="plus"></i>
      </a>
      <a href="/settings/" class="flex-none rounded p-1 hover:bg-slate-100"
        ><i class="block h-5 w-5" data-feather="settings"></i
      ></a>
    </div>
    <ul class="px-2">
      {{ range .SessionUser.Trackers }}
        <li>
          <a
            class="{{ if eq .Slug $.Tracker.Slug }}
              bg-slate-100
            {{ else }}
              text-slate-400
            {{ end }} block break-all rounded px-2 py-1 hover:bg-slate-100"
            href="/{{ $.SessionUser.Username }}/{{ .Slug }}/"
          >
            {{ .DisplayName }}
          </a>
        </li>
      {{ end }}
    </ul>
  </header>
{{ end }}

{{ define "main" }}
  <header class="sticky top-0 flex h-screen w-64 flex-none flex-col gap-2 p-3">
    <div class="flex gap-2">
      <a
        href="javascript:void(0)"
        id="toggle-sidebar"
        class="flex-none rounded p-1 text-center hover:bg-slate-100"
      >
        <i class="block h-5 w-5" data-feather="menu"></i>
      </a>
      <h1 class="break-words text-xl font-semibold">
        {{ .Tracker.DisplayName }}
      </h1>
    </div>
    {{ if .Tracker.Description }}
      <p>{{ .Tracker.Description }}</p>
    {{ end }}
  </header>
  <main class="flex flex-1 flex-col items-center gap-8 py-4">
    <div
      id="months"
      class="grid grid-cols-[auto_auto_auto_auto_auto_auto_auto] place-content-center gap-y-8"
    >
      {{ template "months" dict "tracker" .Tracker }}
    </div>
    <button
      hx-target="#months"
      hx-swap="beforeend"
      hx-get="/template/app/months/"
      hx-vals="js:{...getNextMonths()}"
      hx-on::after-request="updateFromTo(getNextFromTo().from, to.dataset.to)"
      class="rounded-full border border-slate-200 bg-white px-6 py-1 text-slate-400 hover:bg-slate-100 hover:text-slate-600"
    >
      Load More
    </button>
  </main>

  <dialog id="day-detail" class="w-full max-w-md rounded px-8 py-6">
    <div class="flex flex-col gap-6">
      <div class="flex flex-col">
        <div class="flex justify-between gap-2 text-slate-800">
          <h1 class="text-xl font-semibold">
            {{ .Tracker.DisplayName }}
          </h1>
          <button
            class="cursor-pointer"
            hx-on:click="document.getElementById('day-detail').close();document.getElementById('ep').classList.add('hidden')"
          >
            âœ•
          </button>
        </div>
        <time id="day-detail-time" class="font-semibold text-slate-400"> </time>
      </div>

      <div class="flex flex-col gap-4">
        <div class="flex items-center justify-center gap-4">
          <div class="relative grid h-10 w-10 place-items-center">
            <input
              readonly
              id="emoji"
              name="emoji"
              type="text"
              value=""
              class="absolute h-10 w-10 cursor-pointer rounded border-slate-200 bg-slate-100 p-0 text-center"
              hx-on:click="ep.classList.remove('hidden');clearEmoji.classList.remove('hidden');cancelEp.classList.remove('hidden');"
            />

            <i
              x-data
              x-show="!$store.emojiPicker.selected"
              class="pointer-events-none absolute text-slate-400"
              data-feather="smile"
            ></i>
          </div>
          <button
            id="clear-emoji"
            class="hidden font-semibold text-rose-600 underline"
            hx-on:click="emoji.value = '';ep.classList.add('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');Alpine.store('emojiPicker').selected = false;"
          >
            Clear
          </button>
          <button
            id="cancel-ep"
            class="hidden font-semibold text-slate-600 underline"
            hx-on:click="ep.classList.add('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');"
          >
            Cancel
          </button>
        </div>
        <emoji-picker
          hx-on:emoji-click="emoji.value = event.detail.unicode;ep.classList.add('hidden');clearEmoji.classList.add('hidden');cancelEp.classList.add('hidden');Alpine.store('emojiPicker').selected = true;"
          id="ep"
          class="hidden w-full"
        ></emoji-picker>
      </div>
      <input
        autofocus
        id="content"
        type="text"
        name="content"
        value=""
        placeholder="Notes about today's activities..."
        class="flex-1 rounded border-slate-200 bg-slate-100 p-2 placeholder-slate-300 focus:bg-white"
      />
      <button
        hx-on:click="updateDayDetail()"
        class="cursor-pointer rounded bg-indigo-600 p-2 font-semibold text-white"
      >
        Save
      </button>
    </div>
  </dialog>
  <div
    class="hidden"
    id="to"
    data-to="{{ (mustFirst .Tracker.Entries.Months).FormatYYYYMM }}"
  ></div>
  <div
    class="hidden"
    id="from"
    data-from="{{ (mustLast .Tracker.Entries.Months).FormatYYYYMM }}"
  ></div>
  <div class="hidden" id="slug" data-slug="{{ .Tracker.Slug }}"></div>
  <div
    class="hidden"
    id="username"
    data-username="{{ .SessionUser.Username }}"
  ></div>
  <script>
    const ep = document.getElementById("ep");
    const cancelEp = document.getElementById("cancel-ep");
    const clearEmoji = document.getElementById("clear-emoji");
    const addEmoji = document.getElementById("add-emoji");
    const slug = document.getElementById("slug").dataset.slug;
    const username = document.getElementById("username").dataset.username;
    const from = document.getElementById("from");
    const to = document.getElementById("to");
    const dayDetail = document.getElementById("day-detail");
    const dayDetailTime = document.getElementById("day-detail-time");
    const inputEmoji = document.getElementById("emoji");
    const inputContent = document.getElementById("content");
    const months = 3;
    let currentDate = "";

    const params = new URLSearchParams(window.location.search);
    params.set("from", from.dataset.from);
    params.set("to", to.dataset.to);
    history.replaceState(
      null,
      "",
      `${window.location.pathname}?${params.toString()}`,
    );

    function getNextFromTo() {
      const [toYStr, toMStr] = from.dataset.from.split("-");
      const toY = parseInt(toYStr, 10);
      const toM = parseInt(toMStr, 10) - 1;
      let toDate = new Date(toY, toM, 1);
      toDate.setMonth(toDate.getMonth() - 1);

      let fromDate = new Date(toY, toM, 1);
      fromDate.setMonth(fromDate.getMonth() - months);

      return {
        to: `${toDate.getFullYear()}-${(toDate.getMonth() + 1).toString().padStart(2, "0")}`,
        from: `${fromDate.getFullYear()}-${(fromDate.getMonth() + 1).toString().padStart(2, "0")}`,
      };
    }

    function updateFromTo(fromStr, toStr) {
      from.dataset.from = fromStr;
      to.dataset.to = toStr;
      params.set("from", from.dataset.from);
      params.set("to", to.dataset.to);
      history.replaceState(
        null,
        "",
        `${window.location.pathname}?${params.toString()}`,
      );
    }

    function getNextMonths() {
      return {
        ...getNextFromTo(),
        slug,
        username,
      };
    }

    async function getDayDetail(slug, date) {
      try {
        const res = await fetch(
          "/day-detail/?" + new URLSearchParams({ slug: slug, date: date }),
        );
        const { emoji, content } = await res.json();
        inputEmoji.value = emoji;
        if (emoji !== "") {
          Alpine.store("emojiPicker").selected = true;
        } else {
          Alpine.store("emojiPicker").selected = false;
        }

        inputContent.value = content;
        currentDate = date;
        dayDetailTime.replaceChildren(date);
        dayDetail.showModal();
      } catch (err) {
        alert("Something went wrong.");
        console.error(err);
      }
    }

    document.addEventListener("alpine:init", () => {
      Alpine.store("emojiPicker", {
        selected: false,
      });
    });

    async function updateDayDetail() {
      const formData = new FormData();
      formData.set("slug", slug);
      formData.set("date", currentDate);
      formData.set("emoji", inputEmoji.value);
      formData.set("content", inputContent.value);

      if (emoji !== "") {
        Alpine.store("emojiPicker").selected = true;
      } else {
        Alpine.store("emojiPicker").selected = false;
      }

      const res = await fetch("/day-detail/", {
        method: "PUT",
        body: formData,
      });
      htmx.trigger(`#day-${currentDate}`, `update-day-${currentDate}`);
      dayDetail.close();
    }

    feather.replace();
    document
      .getElementById("toggle-sidebar")
      .addEventListener("click", function () {
        const sidebar = document.querySelector("header");
        sidebar.classList.toggle("hidden"); // Toggle visibility
      });
  </script>
  <style>
    .sidebar-hidden {
      display: none;
    }
  </style>
{{ end }}
